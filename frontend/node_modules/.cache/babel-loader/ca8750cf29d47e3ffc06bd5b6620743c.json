{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [companies, setCompanies] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function getCompanies() {\n      const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n      setCompanies(userCompanies.companies);\n      setIsLoading(false);\n      console.log(userCompanies.companies);\n      console.log(companies);\n    }\n\n    if (isLoading && currentUser !== null) {\n      getCompanies();\n    }\n  }, [companies, currentUser, isLoading]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) //     applications.length > 0 ?\n  //     <div>\n  //         <h1>Current Applications</h1>\n  //         {!isLoaded ? <div>Loading...</div> : null}\n  //         <ul className=\"applications-ul\">\n  //             {applications.map(application => (\n  //                 <div key={application.job.id}>\n  //                     <li>Company: {application.company.name}</li>\n  //                     <li>Address: {application.company.address}</li>\n  //                     <li>URL: {application.company.url}</li>\n  //                     <br></br>\n  //                     <li>Position: {application.job.position}</li>\n  //                     <li>Hourly Pay: {application.job.hourly_pay}</li>\n  //                     <li>Date: {formatDate(application.job.date)}</li>\n  //                     <li>Status: {application.status}</li><br></br>\n  //                 </div>\n  //             ))}\n  //         </ul>\n  //     </div>\n  //     : \n  //     <h1>Apply to jobs to view applications</h1>\n  ;\n};\n\n_s(CompaniesApplications, \"niGTBxyBTMpwtAUx5oAqsnDc55U=\");\n\n_c = CompaniesApplications;\nexport default CompaniesApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js"],"names":["React","useState","useEffect","ChefApi","CompaniesApplications","currentUser","companies","setCompanies","isLoading","setIsLoading","getCompanies","userCompanies","getCompaniesFromUsername","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;;;;AAEA,MAAMC,qBAAqB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAmB;AAAA;;AAC7C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeQ,YAAf,GAA8B;AAC1B,YAAMC,aAAa,GAAG,MAAMR,OAAO,CAACS,wBAAR,CAAiCP,WAAjC,CAA5B;AACAE,MAAAA,YAAY,CAACI,aAAa,CAACL,SAAf,CAAZ;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYH,aAAa,CAACL,SAA1B;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACH;;AACD,QAAIE,SAAS,IAAIH,WAAW,KAAK,IAAjC,EAAuC;AACnCK,MAAAA,YAAY;AACf;AACJ,GAXQ,EAWN,CAACJ,SAAD,EAAYD,WAAZ,EAAyBG,SAAzB,CAXM,CAAT;AAcA,sBACI,qCADJ,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBH,CA3CD;;GAAMJ,qB;;KAAAA,qB;AA6CN,eAAeA,qBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\n\nconst CompaniesApplications = ({currentUser}) => {\n    const [companies, setCompanies] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        async function getCompanies() { \n            const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n            setCompanies(userCompanies.companies);\n            setIsLoading(false); \n            console.log(userCompanies.companies)\n            console.log(companies)\n        }\n        if (isLoading && currentUser !== null) {\n            getCompanies()\n        }\n    }, [companies, currentUser, isLoading])\n\n\n    return (\n        <>\n        </>\n    //     applications.length > 0 ?\n    //     <div>\n    //         <h1>Current Applications</h1>\n    //         {!isLoaded ? <div>Loading...</div> : null}\n    //         <ul className=\"applications-ul\">\n    //             {applications.map(application => (\n    //                 <div key={application.job.id}>\n    //                     <li>Company: {application.company.name}</li>\n    //                     <li>Address: {application.company.address}</li>\n    //                     <li>URL: {application.company.url}</li>\n    //                     <br></br>\n    //                     <li>Position: {application.job.position}</li>\n    //                     <li>Hourly Pay: {application.job.hourly_pay}</li>\n    //                     <li>Date: {formatDate(application.job.date)}</li>\n    //                     <li>Status: {application.status}</li><br></br>\n    //                 </div>\n    //             ))}\n    //         </ul>\n    //     </div>\n    //     : \n    //     <h1>Apply to jobs to view applications</h1>\n    )\n}\n\nexport default CompaniesApplications;"]},"metadata":{},"sourceType":"module"}