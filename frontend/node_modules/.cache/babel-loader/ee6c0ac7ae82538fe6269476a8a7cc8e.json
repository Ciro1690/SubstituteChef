{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass ChefApi {\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.log(\"API Call:\", endpoint, data, method); //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${ChefApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n  /**\n   * User api methods\n   */\n\n\n  static async Signup(data) {\n    let res = await this.request(`auth/signup`, data, \"post\");\n    return res.token;\n  }\n\n  static async Login(data) {\n    let res = await this.request(`auth/login`, data, \"post\");\n    return res.token;\n  }\n\n  static async getUserInfo(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  static async editUser(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  static async deleteUser(username) {\n    let res = await this.request(`users/${username}`, \"delete\");\n    return res;\n  }\n  /**\n  * Company api methods\n  */\n\n\n  static async getAllCompanies() {\n    let res = await this.request(\"companies\");\n    return res.companies;\n  }\n\n  static async getAllCompanies() {\n    let res = await this.request(\"companies\");\n    return res.companies;\n  }\n\n  static async getCompaniesFromUsername(username) {\n    let res = await this.request(`companies/username/${username}`);\n    return res;\n  }\n\n  static async signUpCompany(data) {\n    let res = await this.request(`companies/signup`, data, \"post\");\n    return res;\n  }\n\n  static async editCompany(id, data) {\n    let res = await this.request(`companies/${id}`, data, \"patch\");\n    return res.company;\n  }\n\n  static async deleteCompany(id) {\n    let res = await this.request(`companies/${id}`, \"delete\");\n    return res;\n  }\n  /**\n  * Job api methods\n  */\n\n\n  static async getAllJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.job;\n  }\n\n  static async getJobsForCompany(companyId) {\n    let res = await this.request(`jobs/company/${companyId}`);\n    return res.jobs;\n  }\n\n  static async signUpJob(data) {\n    let res = await this.request(`jobs/new`, data, \"post\");\n    return res;\n  }\n\n  static async editJob(id, data) {\n    let res = await this.request(`jobs/${id}`, data, \"patch\");\n    return res.job;\n  }\n\n  static async deleteJob(id) {\n    let res = await this.request(`jobs/${id}`, \"delete\");\n    return res;\n  }\n\n  static async applyToJob(username, jobId) {\n    let res = await this.request(`users/${username}/jobs/${jobId}`, jobId, \"post\");\n    return res.applied;\n  }\n\n}\n\nChefApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default ChefApi;","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/api/api.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","ChefApi","request","endpoint","data","method","console","log","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","Signup","res","Login","getUserInfo","username","user","editUser","deleteUser","getAllCompanies","companies","getCompaniesFromUsername","signUpCompany","editCompany","id","company","deleteCompany","getAllJobs","jobs","getJob","job","getJobsForCompany","companyId","signUpJob","editJob","deleteJob","applyToJob","jobId","applied"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass ChefApi {\n\n    static token;\n\n    static async request(endpoint, data = {}, method = \"get\") {\n        console.log(\"API Call:\", endpoint, data, method);\n\n        //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n        //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n        const url = `${BASE_URL}/${endpoint}`;\n        const headers = { Authorization: `Bearer ${ChefApi.token}` };\n        const params = (method === \"get\")\n            ? data\n            : {};\n\n        try {\n        return (await axios({ url, method, data, params, headers })).data;\n        } catch (err) {\n        console.error(\"API Error:\", err.response);\n        let message = err.response.data.error.message;\n        throw Array.isArray(message) ? message : [message];\n        }\n    }\n\n/**\n * User api methods\n */\n\n    static async Signup(data) {\n        let res = await this.request(`auth/signup`, data, \"post\");\n        return res.token;\n    }\n\n    static async Login(data) {\n        let res = await this.request(`auth/login`, data, \"post\");\n        return res.token;\n    }\n\n    static async getUserInfo(username) {\n        let res = await this.request(`users/${username}`);\n        return res.user;\n    }\n\n    static async editUser(username, data) {\n        let res = await this.request(`users/${username}`, data, \"patch\");\n        return res.user;\n    }\n\n    static async deleteUser(username) {\n        let res = await this.request(`users/${username}`, \"delete\");\n        return res;\n    }\n\n/**\n* Company api methods\n*/\n \n    static async getAllCompanies() {\n            let res = await this.request(\"companies\");\n            return res.companies;\n        }\n    static async getAllCompanies() {\n            let res = await this.request(\"companies\");\n            return res.companies;\n        }\n\n    static async getCompaniesFromUsername(username) {\n        let res = await this.request(`companies/username/${username}`);\n        return res;\n    }\n\n    static async signUpCompany(data) {\n        let res = await this.request(`companies/signup`, data, \"post\");\n        return res;\n    }\n\n    static async editCompany(id, data) {\n        let res = await this.request(`companies/${id}`, data, \"patch\");\n        return res.company;\n    }\n\n    static async deleteCompany(id) {\n        let res = await this.request(`companies/${id}`, \"delete\");\n        return res;\n    }\n\n/**\n* Job api methods\n*/\n \n    static async getAllJobs() {\n            let res = await this.request(\"jobs\");\n            return res.jobs;\n        }\n\n    static async getJob(id) {\n            let res = await this.request(`jobs/${id}`);\n            return res.job;\n        }\n\n    static async getJobsForCompany(companyId) {\n            let res = await this.request(`jobs/company/${companyId}`);\n            return res.jobs;\n        }\n\n    static async signUpJob(data) {\n        let res = await this.request(`jobs/new`, data, \"post\");\n        return res;\n    }\n\n    static async editJob(id, data) {\n        let res = await this.request(`jobs/${id}`, data, \"patch\");\n        return res.job;\n    }\n\n    static async deleteJob(id) {\n        let res = await this.request(`jobs/${id}`, \"delete\");\n        return res;\n    }\n\n    static async applyToJob(username, jobId) {\n        let res = await this.request(`users/${username}/jobs/${jobId}`, jobId, \"post\");\n        return res.applied;\n    }\n }\n\nChefApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n    \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n    \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\nexport default ChefApi;"]},"metadata":{},"sourceType":"module"}