{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/user/UserApplications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [applications, setApplications] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    async function getApplications() {\n      const jobApps = [];\n\n      try {\n        const userInfo = await ChefApi.getUserInfo(currentUser);\n\n        for (let [jobId, status] of userInfo.applications) {\n          const job = await ChefApi.getJob(jobId);\n          let company = await ChefApi.getCompany(job.company_id);\n          jobApps.push({\n            job,\n            status,\n            company\n          });\n        }\n\n        setApplications(jobApps);\n        setIsLoaded(true);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    getApplications();\n  }, [currentUser]);\n  return applications.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-5\",\n      children: [!isLoaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 30\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: applications.map(application => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col border\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: application.company.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: application.company.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: application.company.url,\n            children: application.company.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Your Application\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Position: \", application.job.position]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Hourly Pay: $\", application.job.hourly_pay]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date: \", formatDate(application.job.date)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: application.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this)]\n        }, application.job.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Apply to jobs to view applications\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserApplications, \"JBYy3LVL07qkAFgP/FwxVwhVUS4=\");\n\n_c = UserApplications;\nexport default UserApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/user/UserApplications.js"],"names":["React","useState","useEffect","ChefApi","formatDate","UserApplications","currentUser","applications","setApplications","isLoaded","setIsLoaded","getApplications","jobApps","userInfo","getUserInfo","jobId","status","job","getJob","company","getCompany","company_id","push","err","console","log","length","map","application","name","address","url","position","hourly_pay","date","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility'; \n\nconst UserApplications = ({currentUser}) => {\n    const [applications, setApplications] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        async function getApplications() {\n            const jobApps = [];\n            try {\n                const userInfo = await ChefApi.getUserInfo(currentUser)\n                    for (let [jobId, status] of userInfo.applications) {\n                        const job = await ChefApi.getJob(jobId);\n                        let company = await ChefApi.getCompany(job.company_id)\n                        jobApps.push({ job, status, company });\n                    }\n                    setApplications(jobApps)\n                    setIsLoaded(true);\n\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        getApplications();\n    }, [currentUser]);\n\n    return (\n        applications.length > 0 ?\n        <div className=\"white\">\n            <h1>Current Applications</h1>\n            <div className=\"container mt-5\">\n                {!isLoaded ? <div>Loading...</div> : null}\n                <div className=\"row\">\n                    {applications.map(application => (\n                        <div className=\"col border\" key={application.job.id}>\n                            <h2>{application.company.name}</h2>\n                            <p>{application.company.address}</p>\n                            <a href={application.company.url}>{application.company.url}</a>\n                            <hr></hr>\n                            <h3>Your Application</h3>\n                            <p>Position: {application.job.position}</p>\n                            <p>Hourly Pay: ${application.job.hourly_pay}</p>\n                            <p>Date: {formatDate(application.job.date)}</p>\n                            <p>{application.status}</p>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n        : \n        <h1>Apply to jobs to view applications</h1>\n    )\n}\n\nexport default UserApplications;"]},"metadata":{},"sourceType":"module"}