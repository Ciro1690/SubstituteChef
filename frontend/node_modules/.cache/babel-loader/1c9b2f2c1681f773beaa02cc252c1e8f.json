{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { Button } from '@material-ui/core';\nimport { formatDate } from '../utilities/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [companies, setCompanies] = useState(null);\n  const [decided, setDecided] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function getApplications() {\n      let applicationsArr = [];\n      const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n\n      for (let company of userCompanies.companies) {\n        const companyApplications = await ChefApi.getJobsForCompany(company.id);\n        applicationsArr.push([company, companyApplications]);\n      }\n\n      setCompanies(applicationsArr);\n      setIsLoading(false);\n      setDecided(false);\n    }\n\n    if (!decided && currentUser !== null) {\n      getApplications();\n    }\n  }, [companies, currentUser, decided]);\n\n  const acceptApplicant = ([username, jobId]) => async e => {\n    const status = await ChefApi.updateApplication(username, jobId, {\n      status: \"APPROVED\"\n    });\n    setDecided(true);\n    alert(`You have ${status} this job`);\n  };\n\n  const denyApplicant = ([username, jobId]) => async e => {\n    const status = await ChefApi.updateApplication(username, jobId, {\n      status: \"DENIED\"\n    });\n    setDecided(true);\n    alert(`You have ${status} this job`);\n  };\n\n  return !isLoading && companies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row applications-ul\",\n      children: companies.map(company => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: company[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Address: \", company[0].address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"URL: \", company[0].url]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), company[1].length > 0 ? company[1].map(application => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Open Positions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 55\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Position: \", application.position.toUpperCase()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Hourly Pay: \", application.hourly_pay]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date: \", formatDate(application.date)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 33\n          }, this), application.applications.length > 0 ? application.applications.map(applicant => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Applicant: \", applicant[1]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Status: \", applicant[2]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 70\n            }, this), applicant[2] === \"PENDING\" && !decided ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: acceptApplicant([applicant[1], application.id]),\n                variant: \"contained\",\n                color: \"primary\",\n                children: \"Accept\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: denyApplicant([applicant[1], application.id]),\n                variant: \"contained\",\n                color: \"secondary\",\n                children: \"Deny\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 41\n            }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n              onClick: deleteCompany,\n              variant: \"contained\",\n              color: \"primary\",\n              children: \"Delete Company\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 37\n            }, this)]\n          }, applicant[0], true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No applicants\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 35\n          }, this)]\n        }, application.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No applications to display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 28\n        }, this)]\n      }, company[0].id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Currently no applications to display\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CompaniesApplications, \"di5cs7wgkOnGU+l9H9AZAByWx5o=\");\n\n_c = CompaniesApplications;\nexport default CompaniesApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js"],"names":["React","useState","useEffect","ChefApi","Button","formatDate","CompaniesApplications","currentUser","companies","setCompanies","decided","setDecided","isLoading","setIsLoading","getApplications","applicationsArr","userCompanies","getCompaniesFromUsername","company","companyApplications","getJobsForCompany","id","push","acceptApplicant","username","jobId","e","status","updateApplication","alert","denyApplicant","length","map","name","address","url","application","position","toUpperCase","hourly_pay","date","applications","applicant","deleteCompany"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;;AAEA,MAAMC,qBAAqB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAmB;AAAA;;AAC7C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeY,eAAf,GAAiC;AAC7B,UAAIC,eAAe,GAAG,EAAtB;AACA,YAAMC,aAAa,GAAG,MAAMb,OAAO,CAACc,wBAAR,CAAiCV,WAAjC,CAA5B;;AACA,WAAK,IAAIW,OAAT,IAAoBF,aAAa,CAACR,SAAlC,EAA6C;AACzC,cAAMW,mBAAmB,GAAG,MAAMhB,OAAO,CAACiB,iBAAR,CAA0BF,OAAO,CAACG,EAAlC,CAAlC;AACAN,QAAAA,eAAe,CAACO,IAAhB,CAAqB,CAACJ,OAAD,EAAUC,mBAAV,CAArB;AACH;;AACDV,MAAAA,YAAY,CAACM,eAAD,CAAZ;AACAF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AACD,QAAI,CAACD,OAAD,IAAYH,WAAW,KAAK,IAAhC,EAAsC;AAClCO,MAAAA,eAAe;AAClB;AACJ,GAfQ,EAeN,CAACN,SAAD,EAAYD,WAAZ,EAAyBG,OAAzB,CAfM,CAAT;;AAkBA,QAAMa,eAAe,GAAG,CAAC,CAACC,QAAD,EAAWC,KAAX,CAAD,KAAuB,MAAOC,CAAP,IAAa;AACxD,UAAMC,MAAM,GAAG,MAAMxB,OAAO,CAACyB,iBAAR,CAA0BJ,QAA1B,EAAoCC,KAApC,EAA2C;AAACE,MAAAA,MAAM,EAAE;AAAT,KAA3C,CAArB;AACAhB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAkB,IAAAA,KAAK,CAAE,YAAWF,MAAO,WAApB,CAAL;AACH,GAJD;;AAMA,QAAMG,aAAa,GAAG,CAAC,CAACN,QAAD,EAAWC,KAAX,CAAD,KAAuB,MAAOC,CAAP,IAAa;AACtD,UAAMC,MAAM,GAAG,MAAMxB,OAAO,CAACyB,iBAAR,CAA0BJ,QAA1B,EAAoCC,KAApC,EAA2C;AAACE,MAAAA,MAAM,EAAE;AAAT,KAA3C,CAArB;AACAhB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAkB,IAAAA,KAAK,CAAE,YAAWF,MAAO,WAApB,CAAL;AACH,GAJD;;AAMA,SACI,CAACf,SAAD,IAAcJ,SAAS,CAACuB,MAAV,GAAmB,CAAjC,gBACA;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,gBACKvB,SAAS,CAACwB,GAAV,CAAcd,OAAO,iBAClB;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACI;AAAA,oBAAKA,OAAO,CAAC,CAAD,CAAP,CAAWe;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,kCAAaf,OAAO,CAAC,CAAD,CAAP,CAAWgB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,8BAAShB,OAAO,CAAC,CAAD,CAAP,CAAWiB,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA,gBAJJ,EAKKjB,OAAO,CAAC,CAAD,CAAP,CAAWa,MAAX,GAAoB,CAApB,GACDb,OAAO,CAAC,CAAD,CAAP,CAAWc,GAAX,CAAeI,WAAW,iBACtB;AAAA,kCAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA1B,eACI;AAAA,qCAAcA,WAAW,CAACC,QAAZ,CAAqBC,WAArB,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,uCAAgBF,WAAW,CAACG,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA,iCAAUlC,UAAU,CAAC+B,WAAW,CAACI,IAAb,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,EAIKJ,WAAW,CAACK,YAAZ,CAAyBV,MAAzB,GAAkC,CAAlC,GACGK,WAAW,CAACK,YAAZ,CAAyBT,GAAzB,CAA6BU,SAAS,iBACtC;AAAA,oCACI;AAAA,wCAAeA,SAAS,CAAC,CAAD,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA,qCAAYA,SAAS,CAAC,CAAD,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAEiC;AAAA;AAAA;AAAA;AAAA,oBAFjC,EAGKA,SAAS,CAAC,CAAD,CAAT,KAAiB,SAAjB,IAA8B,CAAChC,OAA/B,gBACD;AAAA,sCACI,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAEa,eAAe,CAAC,CAACmB,SAAS,CAAC,CAAD,CAAV,EAAeN,WAAW,CAACf,EAA3B,CAAD,CAAhC;AAAkE,gBAAA,OAAO,EAAC,WAA1E;AAAsF,gBAAA,KAAK,EAAC,SAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAES,aAAa,CAAC,CAACY,SAAS,CAAC,CAAD,CAAV,EAAeN,WAAW,CAACf,EAA3B,CAAD,CAA9B;AAAgE,gBAAA,OAAO,EAAC,WAAxE;AAAoF,gBAAA,KAAK,EAAC,WAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADC,GAKC,IARN,eASA,QAAC,MAAD;AAChB,cAAA,OAAO,EAAEsB,aADO;AAEhB,cAAA,OAAO,EAAC,WAFQ;AAGhB,cAAA,KAAK,EAAC,SAHU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATA;AAAA,aAAUD,SAAS,CAAC,CAAD,CAAnB;AAAA;AAAA;AAAA;AAAA,kBADA,CADH,gBAmBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAvBN;AAAA,WAAUN,WAAW,CAACf,EAAtB;AAAA;AAAA;AAAA;AAAA,gBADJ,CADC,gBA4BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjCP;AAAA,SAA0BH,OAAO,CAAC,CAAD,CAAP,CAAWG,EAArC;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,gBA4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UA7CJ;AA+CH,CAlFD;;GAAMf,qB;;KAAAA,qB;AAoFN,eAAeA,qBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { Button } from '@material-ui/core';\nimport { formatDate } from '../utilities/utility'; \n\nconst CompaniesApplications = ({currentUser}) => {\n    const [companies, setCompanies] = useState(null);\n    const [decided, setDecided] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        async function getApplications() { \n            let applicationsArr = []\n            const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n            for (let company of userCompanies.companies) {\n                const companyApplications = await ChefApi.getJobsForCompany(company.id)\n                applicationsArr.push([company, companyApplications])\n            }\n            setCompanies(applicationsArr);\n            setIsLoading(false);\n            setDecided(false);\n        }\n        if (!decided && currentUser !== null) {\n            getApplications()\n        }\n    }, [companies, currentUser, decided])\n\n\n    const acceptApplicant = ([username, jobId]) => async (e) => {\n        const status = await ChefApi.updateApplication(username, jobId, {status: \"APPROVED\"})\n        setDecided(true)\n        alert(`You have ${status} this job`)\n    }\n\n    const denyApplicant = ([username, jobId]) => async (e) => {\n        const status = await ChefApi.updateApplication(username, jobId, {status: \"DENIED\"})\n        setDecided(true)\n        alert(`You have ${status} this job`)    \n    }\n\n    return (\n        !isLoading && companies.length > 0 ?\n        <div className=\"container\">\n            <h1>Current Applications</h1>\n            <div className=\"row applications-ul\">\n                {companies.map(company => (\n                    <div className=\"col\" key={company[0].id}>\n                        <h3>{company[0].name}</h3>\n                        <p>Address: {company[0].address}</p>\n                        <p>URL: {company[0].url}</p>\n                        <br></br>\n                        {company[1].length > 0 ?\n                        company[1].map(application => (\n                            <div key={application.id}><b>Open Positions</b>   \n                                <p>Position: {application.position.toUpperCase()}</p>\n                                <p>Hourly Pay: {application.hourly_pay}</p>\n                                <p>Date: {formatDate(application.date)}</p>\n                                {application.applications.length > 0 ?\n                                    application.applications.map(applicant => (\n                                    <div key={applicant[0]}>\n                                        <p>Applicant: {applicant[1]}</p>\n                                        <p>Status: {applicant[2]}</p><br></br>\n                                        {applicant[2] === \"PENDING\" && !decided ?\n                                        <div>\n                                            <Button onClick={acceptApplicant([applicant[1], application.id])} variant=\"contained\" color=\"primary\">Accept</Button>\n                                            <Button onClick={denyApplicant([applicant[1], application.id])} variant=\"contained\" color=\"secondary\">Deny</Button>\n                                        </div>\n                                        : null }\n                                    <Button \n                    onClick={deleteCompany}\n                    variant=\"contained\" \n                    color=\"primary\">\n                    Delete Company\n                </Button>\n                                    </div> \n                                    ))\n                                : <p>No applicants</p> }\n                            </div>\n                            ))\n                         : <p>No applications to display</p>}\n                    </div>\n                ))}\n            </div>\n        </div>\n        : \n        <h1>Currently no applications to display</h1>\n    )\n}\n\nexport default CompaniesApplications;"]},"metadata":{},"sourceType":"module"}