{"ast":null,"code":"import ChefApi from '../api/api';\nexport async function editUser(currentUser, formData) {\n  try {\n    const user = await ChefApi.editUser(currentUser, formData);\n    return {\n      success: true,\n      user\n    };\n  } catch (err) {\n    return {\n      success: false,\n      errors: err\n    };\n  }\n}\nexport async function editCompany(companyId, formData) {\n  try {\n    const company = await ChefApi.editCompany(companyId, formData);\n    return {\n      success: true,\n      user\n    };\n  } catch (err) {\n    return {\n      success: false,\n      errors: err\n    };\n  }\n}\nexport async function registerJob(formData) {\n  try {\n    const job = await ChefApi.signUpJob(formData);\n    return {\n      success: true,\n      job\n    };\n  } catch (err) {\n    return {\n      success: false,\n      errors: err\n    };\n  }\n}\nexport async function registerCompany(formData) {\n  try {\n    await ChefApi.signUpCompany(formData);\n    return {\n      success: true\n    };\n  } catch (err) {\n    return {\n      success: false,\n      errors: err\n    };\n  }\n}\nexport async function getCompaniesFromUsername(formData) {\n  try {\n    await ChefApi.getCompaniesFromUsername(formData);\n    return {\n      success: true\n    };\n  } catch (err) {\n    return {\n      success: false,\n      errors: err\n    };\n  }\n}\nexport async function getJobsForCompany(formData) {\n  try {\n    const jobs = await ChefApi.getJobsForCompany(formData);\n    return {\n      success: true,\n      jobs\n    };\n  } catch (err) {\n    return {\n      success: false,\n      errors: err\n    };\n  }\n}\nexport function formatDate(date) {\n  let dateArr = date.split(\"-\");\n  let year = dateArr[0];\n  let month = dateArr[1];\n  let day = dateArr[2].substring(0, 2);\n  return `${month}/${day}/${year}`;\n}","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/utilities/utility.js"],"names":["ChefApi","editUser","currentUser","formData","user","success","err","errors","editCompany","companyId","company","registerJob","job","signUpJob","registerCompany","signUpCompany","getCompaniesFromUsername","getJobsForCompany","jobs","formatDate","date","dateArr","split","year","month","day","substring"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AAGA,OAAO,eAAeC,QAAf,CAAwBC,WAAxB,EAAqCC,QAArC,EAA+C;AAClD,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMJ,OAAO,CAACC,QAAR,CAAiBC,WAAjB,EAA8BC,QAA9B,CAAnB;AACA,WAAO;AAACE,MAAAA,OAAO,EAAE,IAAV;AAAgBD,MAAAA;AAAhB,KAAP;AACH,GAHD,CAIA,OAAOE,GAAP,EAAY;AACR,WAAO;AAACD,MAAAA,OAAO,EAAE,KAAV;AAAiBE,MAAAA,MAAM,EAAED;AAAzB,KAAP;AACH;AACJ;AAED,OAAO,eAAeE,WAAf,CAA2BC,SAA3B,EAAsCN,QAAtC,EAAgD;AACnD,MAAI;AACA,UAAMO,OAAO,GAAG,MAAMV,OAAO,CAACQ,WAAR,CAAoBC,SAApB,EAA+BN,QAA/B,CAAtB;AACA,WAAO;AAACE,MAAAA,OAAO,EAAE,IAAV;AAAgBD,MAAAA;AAAhB,KAAP;AACH,GAHD,CAIA,OAAOE,GAAP,EAAY;AACR,WAAO;AAACD,MAAAA,OAAO,EAAE,KAAV;AAAiBE,MAAAA,MAAM,EAAED;AAAzB,KAAP;AACH;AACJ;AAED,OAAO,eAAeK,WAAf,CAA4BR,QAA5B,EAAsC;AACzC,MAAI;AACA,UAAMS,GAAG,GAAG,MAAMZ,OAAO,CAACa,SAAR,CAAkBV,QAAlB,CAAlB;AACA,WAAO;AAACE,MAAAA,OAAO,EAAE,IAAV;AAAgBO,MAAAA;AAAhB,KAAP;AACH,GAHD,CAGE,OAAON,GAAP,EAAY;AACV,WAAO;AAACD,MAAAA,OAAO,EAAE,KAAV;AAAiBE,MAAAA,MAAM,EAAED;AAAzB,KAAP;AACH;AACJ;AAED,OAAO,eAAeQ,eAAf,CAAgCX,QAAhC,EAA0C;AAC7C,MAAI;AACA,UAAMH,OAAO,CAACe,aAAR,CAAsBZ,QAAtB,CAAN;AACA,WAAO;AAACE,MAAAA,OAAO,EAAE;AAAV,KAAP;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACV,WAAO;AAACD,MAAAA,OAAO,EAAE,KAAV;AAAiBE,MAAAA,MAAM,EAAED;AAAzB,KAAP;AACH;AACJ;AAED,OAAO,eAAeU,wBAAf,CAAyCb,QAAzC,EAAmD;AACtD,MAAI;AACA,UAAMH,OAAO,CAACgB,wBAAR,CAAiCb,QAAjC,CAAN;AACA,WAAO;AAACE,MAAAA,OAAO,EAAE;AAAV,KAAP;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACV,WAAO;AAACD,MAAAA,OAAO,EAAE,KAAV;AAAiBE,MAAAA,MAAM,EAAED;AAAzB,KAAP;AACH;AACJ;AAED,OAAO,eAAeW,iBAAf,CAAkCd,QAAlC,EAA4C;AAC/C,MAAI;AACA,UAAMe,IAAI,GAAG,MAAMlB,OAAO,CAACiB,iBAAR,CAA0Bd,QAA1B,CAAnB;AACA,WAAO;AAACE,MAAAA,OAAO,EAAE,IAAV;AAAgBa,MAAAA;AAAhB,KAAP;AACH,GAHD,CAGE,OAAOZ,GAAP,EAAY;AACV,WAAO;AAACD,MAAAA,OAAO,EAAE,KAAV;AAAiBE,MAAAA,MAAM,EAAED;AAAzB,KAAP;AACH;AACJ;AAED,OAAO,SAASa,UAAT,CAAoBC,IAApB,EAA0B;AACzB,MAAIC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAd;AACA,MAAIC,IAAI,GAAGF,OAAO,CAAC,CAAD,CAAlB;AACA,MAAIG,KAAK,GAAGH,OAAO,CAAC,CAAD,CAAnB;AACA,MAAII,GAAG,GAAGJ,OAAO,CAAC,CAAD,CAAP,CAAWK,SAAX,CAAqB,CAArB,EAAuB,CAAvB,CAAV;AACA,SAAQ,GAAEF,KAAM,IAAGC,GAAI,IAAGF,IAAK,EAA/B;AACP","sourcesContent":["import ChefApi from '../api/api';\n\n\nexport async function editUser(currentUser, formData) {\n    try {\n        const user = await ChefApi.editUser(currentUser, formData);\n        return {success: true, user}\n    }\n    catch (err) {\n        return {success: false, errors: err}\n    }\n}\n\nexport async function editCompany(companyId, formData) {\n    try {\n        const company = await ChefApi.editCompany(companyId, formData);\n        return {success: true, user}\n    }\n    catch (err) {\n        return {success: false, errors: err}\n    }\n}\n\nexport async function registerJob (formData) {\n    try {\n        const job = await ChefApi.signUpJob(formData)\n        return {success: true, job}\n    } catch (err) {\n        return {success: false, errors: err}\n    }\n}\n\nexport async function registerCompany (formData) {\n    try {\n        await ChefApi.signUpCompany(formData)\n        return {success: true}\n    } catch (err) {\n        return {success: false, errors: err}\n    }\n}\n\nexport async function getCompaniesFromUsername (formData) {\n    try {\n        await ChefApi.getCompaniesFromUsername(formData)\n        return {success: true}\n    } catch (err) {\n        return {success: false, errors: err}\n    }\n}\n\nexport async function getJobsForCompany (formData) {\n    try {\n        const jobs = await ChefApi.getJobsForCompany(formData)\n        return {success: true, jobs}\n    } catch (err) {\n        return {success: false, errors: err}\n    }\n}\n\nexport function formatDate(date) {\n        let dateArr = date.split(\"-\")\n        let year = dateArr[0];\n        let month = dateArr[1];\n        let day = dateArr[2].substring(0,2);\n        return `${month}/${day}/${year}`\n}"]},"metadata":{},"sourceType":"module"}