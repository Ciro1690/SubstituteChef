{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/auth/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Form, FormGroup, Button } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = ({\n  LogIn\n}) => {\n  _s();\n\n  const INITIAL_DATA = {\n    username: \"\",\n    password: \"\"\n  };\n  const [formData, setFormData] = useState(INITIAL_DATA);\n  const [errors, setErrors] = useState([]);\n  let history = useHistory();\n\n  const handleSubmit = async e => {\n    if (formData.username.length === 0 || formData.password.length === 0) {\n      setErrors(\"Username and password cannot be blank\");\n    }\n\n    e.preventDefault();\n    const LoginData = {\n      \"username\": formData.username,\n      \"password\": formData.password\n    };\n    const result = await LogIn(LoginData);\n    setFormData(INITIAL_DATA);\n\n    if (result.success) {\n      history.push(\"/\");\n    } else {\n      setErrors(result.errors.message);\n    }\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(data => ({ ...data,\n      [name]: value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login for Substitute Chef\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"username\",\n          children: \"Username: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"username\",\n          onChange: handleChange,\n          value: formData.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"password\",\n          children: \"Password: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          onChange: handleChange,\n          value: formData.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), errors.length ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"dzeZ+YxNQHoo5Fercmc6piMT3EU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/auth/Login.js"],"names":["React","useState","useHistory","Form","FormGroup","Button","Login","LogIn","INITIAL_DATA","username","password","formData","setFormData","errors","setErrors","history","handleSubmit","e","length","preventDefault","LoginData","result","success","push","message","handleChange","name","value","target","data"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport {\n    Form,\n    FormGroup,\n    Button\n} from 'reactstrap'; \n\nconst Login = ({LogIn}) => {\n    const INITIAL_DATA = {\n        username: \"\",\n        password: \"\", \n    };\n\n    const [formData, setFormData] = useState(INITIAL_DATA);\n    const [errors, setErrors] = useState([]);\n    let history = useHistory();\n\n    const handleSubmit = async e => {\n        if (formData.username.length === 0 || formData.password.length === 0) {\n            setErrors(\"Username and password cannot be blank\")\n        }\n        e.preventDefault();\n        const LoginData = {\n            \"username\": formData.username,\n            \"password\":formData.password           \n        };\n        const result = await LogIn(LoginData)\n        setFormData(INITIAL_DATA);\n        \n        if (result.success) {\n            history.push(\"/\");\n        } else {\n            setErrors(result.errors.message);\n        }\n    }\n\n    const handleChange = e => {\n        const {name, value} = e.target;\n        setFormData(data => ({\n            ...data,\n            [name]: value\n        }))\n    }\n\n    return (\n        <div>\n            <h1>Login for Substitute Chef</h1>\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <label id=\"username\">Username: </label>\n                    <input\n                        type=\"text\"\n                        name=\"username\"\n                        onChange={handleChange}\n                        value={formData.username}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <label id=\"password\">Password: </label>\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        onChange={handleChange}\n                        value={formData.password}\n                    />\n                </FormGroup>\n                {errors.length ?\n                    <p>{errors}</p>\n                : null }\n                <Button>Log In</Button>\n            </Form>\n        </div>\n    )\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}