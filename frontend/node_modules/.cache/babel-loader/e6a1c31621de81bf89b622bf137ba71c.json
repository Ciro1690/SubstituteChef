{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/search/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst Map = ({\n  companies\n}) => {\n  _s();\n\n  const [coordinates, setCoordinates] = useState([]);\n\n  const getCoordinates = async () => {\n    let promises = [];\n    let coordsArr = [];\n\n    for (let company of companies) {\n      const location = company.address;\n      promises.push(axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n        params: {\n          address: location,\n          key: process.env.REACT_APP_API_KEY\n        }\n      }));\n      Promise.all(promises).then(function (response) {\n        let location = response.data.results[0].geometry.location;\n        let coordinates = [company.name, {\n          lat: location.lat,\n          lng: location.lng\n        }];\n        coordsArr.push(coordinates);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n\n    return coordsArr;\n  };\n\n  useEffect(() => {\n    async function loadCoordinates() {\n      let coordsArr = await getCoordinates();\n      console.log(coordsArr);\n      setCoordinates(coordsArr);\n    }\n\n    loadCoordinates();\n  }, []);\n  const location = {\n    lat: 32.74544,\n    lng: -117.14369\n  };\n  const mapStyles = {\n    height: \"70vh\",\n    width: \"100%\"\n  };\n  return coordinates.length > 0 ? /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: process.env.REACT_APP_API_KEY,\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapStyles,\n      zoom: 13,\n      center: location,\n      children: [coordinates.map(coord => /*#__PURE__*/_jsxDEV(Marker, {\n        position: coord[1]\n      }, coord[0], false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 13\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mobile-empty\",\n    children: \"Click a Company card to load the map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Map, \"mUTlqyO1NJz5A08+7KZJPXLZaSM=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/search/Map.js"],"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","axios","require","config","Map","companies","coordinates","setCoordinates","getCoordinates","promises","coordsArr","company","location","address","push","get","params","key","process","env","REACT_APP_API_KEY","Promise","all","then","response","data","results","geometry","name","lat","lng","catch","error","console","log","loadCoordinates","mapStyles","height","width","length","map","coord"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,MAAhC,QAA8C,wBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAAA;;AAEzB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMY,cAAc,GAAG,YAAY;AAC/B,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,OAAT,IAAoBN,SAApB,EAA+B;AAC3B,YAAMO,QAAQ,GAAGD,OAAO,CAACE,OAAzB;AACAJ,MAAAA,QAAQ,CAACK,IAAT,CAAcb,KAAK,CAACc,GAAN,CAAU,mDAAV,EAA+D;AACzEC,QAAAA,MAAM,EAAC;AACHH,UAAAA,OAAO,EAAED,QADN;AAEHK,UAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFd;AADkE,OAA/D,CAAd;AAMAC,MAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ,EACKc,IADL,CACU,UAASC,QAAT,EAAkB;AACpB,YAAIZ,QAAQ,GAAGY,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBC,QAAzB,CAAkCf,QAAjD;AACA,YAAIN,WAAW,GAAG,CAACK,OAAO,CAACiB,IAAT,EAAe;AAACC,UAAAA,GAAG,EAAEjB,QAAQ,CAACiB,GAAf;AAAoBC,UAAAA,GAAG,EAAElB,QAAQ,CAACkB;AAAlC,SAAf,CAAlB;AACApB,QAAAA,SAAS,CAACI,IAAV,CAAeR,WAAf;AACH,OALL,EAMKyB,KANL,CAMW,UAASC,KAAT,EAAgB;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OARL;AASH;;AACD,WAAOtB,SAAP;AACH,GAtBD;;AAwBAb,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAesC,eAAf,GAAiC;AAC7B,UAAIzB,SAAS,GAAG,MAAMF,cAAc,EAApC;AACAyB,MAAAA,OAAO,CAACC,GAAR,CAAYxB,SAAZ;AACAH,MAAAA,cAAc,CAACG,SAAD,CAAd;AACH;;AACDyB,IAAAA,eAAe;AAClB,GAPQ,EAON,EAPM,CAAT;AASA,QAAMvB,QAAQ,GAAG;AAACiB,IAAAA,GAAG,EAAE,QAAN;AAAgBC,IAAAA,GAAG,EAAE,CAAC;AAAtB,GAAjB;AACA,QAAMM,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,KAAK,EAAE;AAFO,GAAlB;AAKA,SACIhC,WAAW,CAACiC,MAAZ,GAAqB,CAArB,gBACI,QAAC,UAAD;AACI,IAAA,gBAAgB,EAAGrB,OAAO,CAACC,GAAR,CAAYC,iBADnC;AAAA,2BAEA,QAAC,SAAD;AACI,MAAA,iBAAiB,EAAKgB,SAD1B;AAEI,MAAA,IAAI,EAAK,EAFb;AAGI,MAAA,MAAM,EAAKxB,QAHf;AAAA,iBAKCN,WAAW,CAACkC,GAAZ,CAAgBC,KAAK,iBAClB,QAAC,MAAD;AAEI,QAAA,QAAQ,EAAEA,KAAK,CAAC,CAAD;AAFnB,SACSA,KAAK,CAAC,CAAD,CADd;AAAA;AAAA;AAAA;AAAA,cADH,CALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,UADJ,gBAkBI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAnBR;AAqBH,CAhED;;GAAMrC,G;;KAAAA,G;AAkEN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport axios from 'axios';\nrequire('dotenv').config()\n\nconst Map = ({companies}) => {\n\n    const [coordinates, setCoordinates] = useState([]);\n\n    const getCoordinates = async () => {\n        let promises = [];\n        let coordsArr = [];\n        for (let company of companies) {\n            const location = company.address\n            promises.push(axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n                params:{\n                    address: location,\n                    key: process.env.REACT_APP_API_KEY\n                }\n            }))\n            Promise.all(promises)\n                .then(function(response){\n                    let location = response.data.results[0].geometry.location\n                    let coordinates = [company.name, {lat: location.lat, lng: location.lng}]\n                    coordsArr.push(coordinates)           \n                })\n                .catch(function(error) {\n                    console.log(error)\n                }) \n        }\n        return coordsArr\n    }\n\n    useEffect(() => {\n        async function loadCoordinates() {\n            let coordsArr = await getCoordinates();\n            console.log(coordsArr)\n            setCoordinates(coordsArr);\n        }\n        loadCoordinates();\n    }, []);\n\n    const location = {lat: 32.74544, lng: -117.14369}\n    const mapStyles = {\n        height: \"70vh\",\n        width: \"100%\"\n    }\n\n    return (\n        coordinates.length > 0  ?\n            <LoadScript\n                googleMapsApiKey= {process.env.REACT_APP_API_KEY}>\n            <GoogleMap\n                mapContainerStyle = { mapStyles }\n                zoom = { 13 }\n                center = { location } \n            >\n            {coordinates.map(coord => (\n                <Marker \n                    key={coord[0]} \n                    position={coord[1]} \n                />\n                ))\n            })\n            </GoogleMap >\n            </LoadScript>\n            :\n            <div className=\"mobile-empty\">Click a Company card to load the map</div>\n    )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}