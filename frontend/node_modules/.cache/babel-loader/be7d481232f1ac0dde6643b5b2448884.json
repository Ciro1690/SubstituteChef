{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/jobs/Applications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Applications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [applications, setApplications] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    async function getApplications() {\n      const jobApps = [];\n\n      try {\n        const userInfo = await ChefApi.getUserInfo(currentUser);\n\n        for (let jobId of userInfo.applications) {\n          const job = await ChefApi.getJob(jobId);\n          let company = await ChefApi.getCompany(job.company_id);\n          jobApps.push({\n            job,\n            company\n          });\n        }\n\n        console.log(jobApps);\n        setApplications(jobApps);\n        setIsLoaded(true);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    getApplications();\n  }, [currentUser]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), !isLoaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 26\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: applications.map(application => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Company: \", application.company.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Position: \", application.job.position]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Hourly Pay: \", application.job.hourly_pay]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Date: \", formatDate(application.job.date)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 74\n        }, this)]\n      }, application.job.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Applications, \"JBYy3LVL07qkAFgP/FwxVwhVUS4=\");\n\n_c = Applications;\nexport default Applications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Applications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/jobs/Applications.js"],"names":["React","useState","useEffect","ChefApi","formatDate","Applications","currentUser","applications","setApplications","isLoaded","setIsLoaded","getApplications","jobApps","userInfo","getUserInfo","jobId","job","getJob","company","getCompany","company_id","push","console","log","err","map","application","name","position","hourly_pay","date","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAmB;AAAA;;AACpC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,eAAf,GAAiC;AAC7B,YAAMC,OAAO,GAAG,EAAhB;;AACA,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACW,WAAR,CAAoBR,WAApB,CAAvB;;AACI,aAAK,IAAIS,KAAT,IAAkBF,QAAQ,CAACN,YAA3B,EAAyC;AACrC,gBAAMS,GAAG,GAAG,MAAMb,OAAO,CAACc,MAAR,CAAeF,KAAf,CAAlB;AACA,cAAIG,OAAO,GAAG,MAAMf,OAAO,CAACgB,UAAR,CAAmBH,GAAG,CAACI,UAAvB,CAApB;AACAR,UAAAA,OAAO,CAACS,IAAR,CAAa;AAAEL,YAAAA,GAAF;AAAOE,YAAAA;AAAP,WAAb;AACH;;AACDI,QAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AACAJ,QAAAA,eAAe,CAACI,OAAD,CAAf;AACAF,QAAAA,WAAW,CAAC,IAAD,CAAX;AAEP,OAXD,CAYA,OAAOc,GAAP,EAAY;AACRF,QAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACH;AACJ;;AACDb,IAAAA,eAAe;AAClB,GApBQ,EAoBN,CAACL,WAAD,CApBM,CAAT;AAsBA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEK,CAACG,QAAD,gBAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAZ,GAAoC,IAFzC,eAGI;AAAA,gBACKF,YAAY,CAACkB,GAAb,CAAiBC,WAAW,iBACzB;AAAA,gCACI;AAAA,kCAAcA,WAAW,CAACR,OAAZ,CAAoBS,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,mCAAeD,WAAW,CAACV,GAAZ,CAAgBY,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,qCAAiBF,WAAW,CAACV,GAAZ,CAAgBa,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA,+BAAWzB,UAAU,CAACsB,WAAW,CAACV,GAAZ,CAAgBc,IAAjB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAIqD;AAAA;AAAA;AAAA;AAAA,gBAJrD;AAAA,SAAUJ,WAAW,CAACV,GAAZ,CAAgBe,EAA1B;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CA1CD;;GAAM1B,Y;;KAAAA,Y;AA4CN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility'; \n\nconst Applications = ({currentUser}) => {\n    const [applications, setApplications] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        async function getApplications() {\n            const jobApps = [];\n            try {\n                const userInfo = await ChefApi.getUserInfo(currentUser)\n                    for (let jobId of userInfo.applications) {\n                        const job = await ChefApi.getJob(jobId);\n                        let company = await ChefApi.getCompany(job.company_id)\n                        jobApps.push({ job, company });\n                    }\n                    console.log(jobApps)\n                    setApplications(jobApps)\n                    setIsLoaded(true);\n\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        getApplications();\n    }, [currentUser]);\n\n    return (\n        <div>\n            <h1>Current Applications</h1>\n            {!isLoaded ? <div>Loading...</div> : null}\n            <ul>\n                {applications.map(application => (\n                    <div key={application.job.id}>\n                        <li>Company: {application.company.name}</li>\n                        <li>Position: {application.job.position}</li>\n                        <li>Hourly Pay: {application.job.hourly_pay}</li>\n                        <li>Date: {formatDate(application.job.date)}</li><br></br>\n                    </div>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default Applications;"]},"metadata":{},"sourceType":"module"}