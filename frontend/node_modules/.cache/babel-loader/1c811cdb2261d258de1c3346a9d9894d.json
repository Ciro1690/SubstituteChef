{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [companies, setCompanies] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function getCompanies() {\n      const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n      setCompanies(userCompanies.companies);\n      setIsLoading(false);\n    }\n\n    if (isLoading && currentUser !== null) {\n      getCompanies();\n    }\n  }, [currentUser, isLoading]);\n  useEffect(() => {\n    async function getApplications() {\n      const jobApps = [];\n\n      try {\n        const userInfo = await ChefApi.getUserInfo(currentUser);\n\n        for (let [jobId, status] of userInfo.applications) {\n          const job = await ChefApi.getJob(jobId);\n          let company = await ChefApi.getCompany(job.company_id);\n          jobApps.push({\n            job,\n            status,\n            company\n          });\n        }\n\n        console.log(jobApps);\n        setApplications(jobApps);\n        setIsLoaded(true);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    getApplications();\n  }, [currentUser]);\n  return applications.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), !isLoaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 26\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"applications-ul\",\n      children: applications.map(application => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Company: \", application.company.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Address: \", application.company.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"URL: \", application.company.url]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Position: \", application.job.position]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Hourly Pay: \", application.job.hourly_pay]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Date: \", formatDate(application.job.date)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Status: \", application.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 62\n        }, this)]\n      }, application.job.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Apply to jobs to view applications\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CompaniesApplications, \"7315YZfe6b6CO5H6Klr8WvwvvsU=\");\n\n_c = CompaniesApplications;\nexport default CompaniesApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js"],"names":["React","useState","useEffect","ChefApi","CompaniesApplications","currentUser","companies","setCompanies","isLoading","setIsLoading","getCompanies","userCompanies","getCompaniesFromUsername","getApplications","jobApps","userInfo","getUserInfo","jobId","status","applications","job","getJob","company","getCompany","company_id","push","console","log","setApplications","setIsLoaded","err","length","isLoaded","map","application","name","address","url","position","hourly_pay","formatDate","date","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\n\nconst CompaniesApplications = ({currentUser}) => {\n    const [companies, setCompanies] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        async function getCompanies() { \n            const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n            setCompanies(userCompanies.companies);\n            setIsLoading(false); \n        }\n        if (isLoading && currentUser !== null) {\n            getCompanies()\n        }\n    }, [currentUser, isLoading])\n\n    useEffect(() => {\n        async function getApplications() {\n            const jobApps = [];\n            try {\n                const userInfo = await ChefApi.getUserInfo(currentUser)\n                    for (let [jobId, status] of userInfo.applications) {\n                        const job = await ChefApi.getJob(jobId);\n                        let company = await ChefApi.getCompany(job.company_id)\n                        jobApps.push({ job, status, company });\n                    }\n                    console.log(jobApps)\n                    setApplications(jobApps)\n                    setIsLoaded(true);\n\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        getApplications();\n    }, [currentUser]);\n\n    return (\n        applications.length > 0 ?\n        <div>\n            <h1>Current Applications</h1>\n            {!isLoaded ? <div>Loading...</div> : null}\n            <ul className=\"applications-ul\">\n                {applications.map(application => (\n                    <div key={application.job.id}>\n                        <li>Company: {application.company.name}</li>\n                        <li>Address: {application.company.address}</li>\n                        <li>URL: {application.company.url}</li>\n                        <br></br>\n                        <li>Position: {application.job.position}</li>\n                        <li>Hourly Pay: {application.job.hourly_pay}</li>\n                        <li>Date: {formatDate(application.job.date)}</li>\n                        <li>Status: {application.status}</li><br></br>\n                    </div>\n                ))}\n            </ul>\n        </div>\n        : \n        <h1>Apply to jobs to view applications</h1>\n    )\n}\n\nexport default CompaniesApplications;"]},"metadata":{},"sourceType":"module"}