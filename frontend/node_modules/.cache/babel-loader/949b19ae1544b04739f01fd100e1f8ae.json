{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/search/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { google, GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst Map = ({\n  companies,\n  clickedCompany\n}) => {\n  _s();\n\n  // const [coordinates, setCoordinates] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(true);\n  console.log(companies);\n  console.log(clickedCompany); // useEffect(() => {\n  //     async function loadCoordinates() {\n  //         let coordsArr = [];\n  //         for (let company of companies) {\n  //             const location = company.address\n  //             await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n  //                 params:{\n  //                     address: location,\n  //                     key: process.env.REACT_APP_API_KEY\n  //                 }\n  //             })\n  //                 .then(function(response){\n  //                     let location = response.data.results[0].geometry.location\n  //                     let coordinates = [company.id.toString(), {lat: location.lat, lng: location.lng}]\n  //                     coordsArr.push(coordinates)      \n  //                 })\n  //                 .catch(function(error) {\n  //                     console.log(error)\n  //                 }) \n  //         }\n  //         setCoordinates(coordsArr);\n  //         setIsLoaded(true)\n  //     }\n  //     loadCoordinates();\n  // }, [companies]);\n\n  const location = {\n    lat: 32.74544,\n    lng: -117.14369\n  };\n  const mapStyles = {\n    height: \"70vh\",\n    width: \"100%\"\n  };\n  const svgMarker = {\n    path: \"M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z\",\n    fillColor: \"blue\",\n    fillOpacity: 0.6,\n    strokeWeight: 0,\n    rotation: 0,\n    scale: 2,\n    anchor: new google.maps.Point(15, 30)\n  };\n  return isLoaded ? /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: process.env.REACT_APP_API_KEY,\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapStyles,\n      zoom: 12,\n      center: location,\n      children: [companies.map(company => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: company.lat,\n          lng: company.lng\n        },\n        labelInBackground: true,\n        label: clickedCompany.id === company.id ? company.name : null,\n        icon: clickedCompany.id === company.id ? svgMarker : null\n      }, company.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 13\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Map, \"rghfZOAcWRMXS0vY2ff9+tyYTSY=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/search/Map.js"],"names":["React","useState","google","GoogleMap","LoadScript","Marker","require","config","Map","companies","clickedCompany","isLoaded","setIsLoaded","console","log","location","lat","lng","mapStyles","height","width","svgMarker","path","fillColor","fillOpacity","strokeWeight","rotation","scale","anchor","maps","Point","process","env","REACT_APP_API_KEY","map","company","id","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,MAAxC,QAAsD,wBAAtD;;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAmC;AAAA;;AAE3C;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ,EAL2C,CAM3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMK,QAAQ,GAAG;AAACC,IAAAA,GAAG,EAAE,QAAN;AAAgBC,IAAAA,GAAG,EAAE,CAAC;AAAtB,GAAjB;AACA,QAAMC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,KAAK,EAAE;AAFO,GAAlB;AAKA,QAAMC,SAAS,GAAG;AACdC,IAAAA,IAAI,EAAE,oSADQ;AAEdC,IAAAA,SAAS,EAAE,MAFG;AAGdC,IAAAA,WAAW,EAAE,GAHC;AAIdC,IAAAA,YAAY,EAAE,CAJA;AAKdC,IAAAA,QAAQ,EAAE,CALI;AAMdC,IAAAA,KAAK,EAAE,CANO;AAOlBC,IAAAA,MAAM,EAAE,IAAI1B,MAAM,CAAC2B,IAAP,CAAYC,KAAhB,CAAsB,EAAtB,EAA0B,EAA1B;AAPU,GAAlB;AAWA,SACInB,QAAQ,gBACJ,QAAC,UAAD;AACI,IAAA,gBAAgB,EAAGoB,OAAO,CAACC,GAAR,CAAYC,iBADnC;AAAA,2BAEA,QAAC,SAAD;AACI,MAAA,iBAAiB,EAAKf,SAD1B;AAEI,MAAA,IAAI,EAAK,EAFb;AAGI,MAAA,MAAM,EAAKH,QAHf;AAAA,iBAMCN,SAAS,CAACyB,GAAV,CAAcC,OAAO,iBAClB,QAAC,MAAD;AACI,QAAA,QAAQ,EAAE;AAACnB,UAAAA,GAAG,EAAEmB,OAAO,CAACnB,GAAd;AAAmBC,UAAAA,GAAG,EAAEkB,OAAO,CAAClB;AAAhC,SADd;AAEI,QAAA,iBAAiB,EAAE,IAFvB;AAGI,QAAA,KAAK,EAAEP,cAAc,CAAC0B,EAAf,KAAsBD,OAAO,CAACC,EAA9B,GAAmCD,OAAO,CAACE,IAA3C,GAAkD,IAH7D;AAII,QAAA,IAAI,EAAE3B,cAAc,CAAC0B,EAAf,KAAsBD,OAAO,CAACC,EAA9B,GAAmCf,SAAnC,GAA+C;AAJzD,SAAac,OAAO,CAACC,EAArB;AAAA;AAAA;AAAA;AAAA,cADH,CAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,UADI,gBAqBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAtBR;AAwBH,CAzED;;GAAM5B,G;;KAAAA,G;AA2EN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { google, GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nrequire('dotenv').config()\n\nconst Map = ({ companies, clickedCompany }) => {\n\n    // const [coordinates, setCoordinates] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(true);\n    console.log(companies)\n    console.log(clickedCompany)\n    // useEffect(() => {\n    //     async function loadCoordinates() {\n    //         let coordsArr = [];\n    //         for (let company of companies) {\n    //             const location = company.address\n    //             await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n    //                 params:{\n    //                     address: location,\n    //                     key: process.env.REACT_APP_API_KEY\n    //                 }\n    //             })\n    //                 .then(function(response){\n    //                     let location = response.data.results[0].geometry.location\n    //                     let coordinates = [company.id.toString(), {lat: location.lat, lng: location.lng}]\n    //                     coordsArr.push(coordinates)      \n    //                 })\n    //                 .catch(function(error) {\n    //                     console.log(error)\n    //                 }) \n    //         }\n    //         setCoordinates(coordsArr);\n    //         setIsLoaded(true)\n    //     }\n    //     loadCoordinates();\n    // }, [companies]);\n\n    const location = {lat: 32.74544, lng: -117.14369}\n    const mapStyles = {\n        height: \"70vh\",\n        width: \"100%\"\n    }\n\n    const svgMarker = {\n        path: \"M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z\",\n        fillColor: \"blue\",\n        fillOpacity: 0.6,\n        strokeWeight: 0,\n        rotation: 0,\n        scale: 2,\n    anchor: new google.maps.Point(15, 30),\n\n    };\n\n    return (\n        isLoaded  ?\n            <LoadScript\n                googleMapsApiKey= {process.env.REACT_APP_API_KEY}>\n            <GoogleMap\n                mapContainerStyle = { mapStyles }\n                zoom = { 12 }\n                center = { location } \n            >\n\n            {companies.map(company => (\n                <Marker key={company.id}\n                    position={{lat: company.lat, lng: company.lng}}\n                    labelInBackground={true}\n                    label={clickedCompany.id === company.id ? company.name : null}\n                    icon={clickedCompany.id === company.id ? svgMarker : null}\n                />\n                ))\n            })\n            </GoogleMap >\n            </LoadScript>\n            :\n            <p>Loading...</p>\n    )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}