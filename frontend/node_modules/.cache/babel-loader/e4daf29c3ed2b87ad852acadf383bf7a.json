{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { Button } from '@material-ui/core';\nimport { formatDate } from '../utilities/utility';\nimport Application from './Application';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [companies, setCompanies] = useState(null);\n  const [decided, setDecided] = useState(false);\n  const [show, setShow] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  useEffect(() => {\n    async function getApplications() {\n      let applicationsArr = [];\n      const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n\n      for (let company of userCompanies.companies) {\n        const companyApplications = await ChefApi.getJobsForCompany(company.id);\n        applicationsArr.push([company, companyApplications]);\n      }\n\n      setCompanies(applicationsArr);\n      setIsLoading(false);\n      setDecided(false);\n    }\n\n    if (!decided && currentUser !== null) {\n      getApplications();\n    }\n  }, [companies, currentUser, decided]);\n\n  const acceptApplicant = ([username, jobId]) => async e => {\n    const status = await ChefApi.updateApplication(username, jobId, {\n      status: \"APPROVED\"\n    });\n    setDecided(true);\n    alert(`You have ${status} this job`);\n  };\n\n  const denyApplicant = ([username, jobId]) => async e => {\n    const status = await ChefApi.updateApplication(username, jobId, {\n      status: \"DENIED\"\n    });\n    setDecided(true);\n    alert(`You have ${status} this job`);\n  };\n\n  const deleteJob = async id => {\n    try {\n      const job = await ChefApi.deleteJob(id);\n      console.log(job);\n      alert(`Deleted job`);\n    } catch (err) {\n      console.log(err);\n      setErrors(`Unable to delete job`);\n    }\n  };\n\n  const showJobs = () => {\n    setShow(!show);\n  };\n\n  return !isLoading && companies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Companies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row applications-ul\",\n      children: companies.map(company => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col border\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: company[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: company[0].address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: company[0].url,\n            target: \"blank\",\n            children: company[0].url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: company[1].length > 0 ? company[1].map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              className: \"mb-3\",\n              onClick: showJobs,\n              variant: \"contained\",\n              color: \"secondary\",\n              children: \"View jobs for this company\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Open Job\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Position: \", job.position]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Hourly Pay: \", job.hourly_pay]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Date: \", formatDate(job.date)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 37\n            }, this), job.applications.length > 0 ? job.applications.map(applicant => /*#__PURE__*/_jsxDEV(Application, {\n              applicant: applicant,\n              job: job,\n              acceptApplicant: acceptApplicant,\n              denyApplicant: denyApplicant,\n              decided: decided\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 45\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No applicants\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 39\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"mb-3\",\n              onClick: () => deleteJob(job.id),\n              variant: \"contained\",\n              color: \"primary\",\n              children: \"Delete Job\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: errors.length ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: errors\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 41\n              }, this) : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 37\n            }, this)]\n          }, job.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No applications to display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)]\n      }, company[0].id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Currently no applications to display\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CompaniesApplications, \"lQz937TJ4Vqewm+bgHJM8hFuyL0=\");\n\n_c = CompaniesApplications;\nexport default CompaniesApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js"],"names":["React","useState","useEffect","ChefApi","Button","formatDate","Application","CompaniesApplications","currentUser","companies","setCompanies","decided","setDecided","show","setShow","isLoading","setIsLoading","errors","setErrors","getApplications","applicationsArr","userCompanies","getCompaniesFromUsername","company","companyApplications","getJobsForCompany","id","push","acceptApplicant","username","jobId","e","status","updateApplication","alert","denyApplicant","deleteJob","job","console","log","err","showJobs","length","map","name","address","url","position","hourly_pay","date","applications","applicant"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { Button } from '@material-ui/core';\nimport { formatDate } from '../utilities/utility'; \nimport Application from './Application';\n\nconst CompaniesApplications = ({currentUser}) => {\n    const [companies, setCompanies] = useState(null);\n    const [decided, setDecided] = useState(false);\n    const [show, setShow] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [errors, setErrors] = useState([]);\n\n    useEffect(() => {\n        async function getApplications() { \n            let applicationsArr = []\n            const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n            for (let company of userCompanies.companies) {\n                const companyApplications = await ChefApi.getJobsForCompany(company.id)\n                applicationsArr.push([company, companyApplications])\n            }\n            setCompanies(applicationsArr);\n            setIsLoading(false);\n            setDecided(false);\n        }\n        if (!decided && currentUser !== null) {\n            getApplications()\n        }\n    }, [companies, currentUser, decided])\n\n\n    const acceptApplicant = ([username, jobId]) => async (e) => {\n        const status = await ChefApi.updateApplication(username, jobId, {status: \"APPROVED\"})\n        setDecided(true)\n        alert(`You have ${status} this job`)\n    }\n\n    const denyApplicant = ([username, jobId]) => async (e) => {\n        const status = await ChefApi.updateApplication(username, jobId, {status: \"DENIED\"})\n        setDecided(true)\n        alert(`You have ${status} this job`)    \n    }\n\n     const deleteJob = async (id) => {\n        try {\n            const job = await ChefApi.deleteJob(id)\n            console.log(job)\n            alert(`Deleted job`)\n        }\n        catch (err) {\n            console.log(err)\n            setErrors(`Unable to delete job`)\n        }\n\n    }\n    \n    const showJobs = () => {\n        setShow(!show);\n    }\n\n    return (\n        !isLoading && companies.length > 0 ?\n        <div className=\"container mt-3\">\n            <h1>Your Companies</h1>\n            <div className=\"row applications-ul\">\n                {companies.map(company => (\n                    <div className=\"col border\" key={company[0].id}>\n                        <h2>{company[0].name}</h2>\n                        <p>{company[0].address}</p>\n                        <p><a href={company[0].url} target=\"blank\">{company[0].url}</a></p>\n                        <br></br>\n                        <div className=\"row\">                           \n                        {company[1].length > 0 ?\n                            company[1].map(job => (\n                                <div className=\"col\" key={job.id}>\n                                    <Button \n                                        className=\"mb-3\"\n                                        onClick={showJobs}\n                                        variant=\"contained\" \n                                        color=\"secondary\">\n                                        View jobs for this company\n                                    </Button> \n                                    \n                                    <b>Open Job</b>   \n                                    <p>Position: {job.position}</p>\n                                    <p>Hourly Pay: {job.hourly_pay}</p>\n                                    <p>Date: {formatDate(job.date)}</p>\n                                    \n                                    {job.applications.length > 0 ?\n                                        job.applications.map(applicant => (\n                                            <Application \n                                                applicant={applicant} \n                                                job={job}\n                                                acceptApplicant={acceptApplicant}\n                                                denyApplicant={denyApplicant}\n                                                decided={decided}\n                                            />\n                                        ))\n                                    : <p>No applicants</p> }\n                                    <Button \n                                        className=\"mb-3\"\n                                        onClick={() => deleteJob(job.id)}\n                                        variant=\"contained\" \n                                        color=\"primary\">\n                                        Delete Job\n                                    </Button>\n                                    <div>\n                                    {errors.length ?\n                                        <p>{errors}</p>\n                                    : null }\n                                    </div>\n                                </div>\n                                ))\n                            : <p>No applications to display</p>}\n                         </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n        : \n        <h1>Currently no applications to display</h1>\n    )\n}\n\nexport default CompaniesApplications;"]},"metadata":{},"sourceType":"module"}