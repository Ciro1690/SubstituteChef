{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [applications, setApplications] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function getApplications() {\n      let applicationsArr = {};\n      const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n\n      for (let company of userCompanies.companies) {\n        applicationsArr[company.name] = [];\n        const companyApplications = await ChefApi.getJobsForCompany(company.id);\n        applicationsArr[company.name].push(companyApplications);\n      }\n\n      setApplications(applicationsArr);\n      setIsLoading(false);\n    }\n\n    if (isLoading && currentUser !== null) {\n      getApplications();\n    }\n  }, [applications, currentUser, isLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), !isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 27\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"applications-ul\",\n      children: Object.entries(applications).map(([company, applications]) =>\n      /*#__PURE__*/\n      // <div key={application.job.id}>\n      _jsxDEV(\"li\", {\n        children: [\"Company: \", company]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }, this) // <li>Address: {application.company.address}</li>\n      // <li>URL: {application.company.url}</li>\n      // <br></br>\n      // <li>Position: {application.job.position}</li>\n      // <li>Hourly Pay: {application.job.hourly_pay}</li>\n      // <li>Date: {formatDate(application.job.date)}</li>\n      // <li>Status: {application.status}</li><br></br>\n      // </div>\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CompaniesApplications, \"PCVdT/P5nO2JDpQMLTtHqus9m0g=\");\n\n_c = CompaniesApplications;\nexport default CompaniesApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js"],"names":["React","useState","useEffect","ChefApi","formatDate","CompaniesApplications","currentUser","applications","setApplications","isLoading","setIsLoading","getApplications","applicationsArr","userCompanies","getCompaniesFromUsername","company","companies","name","companyApplications","getJobsForCompany","id","push","Object","entries","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;;AAEA,MAAMC,qBAAqB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAmB;AAAA;;AAC7C,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,eAAf,GAAiC;AAC7B,UAAIC,eAAe,GAAG,EAAtB;AACA,YAAMC,aAAa,GAAG,MAAMV,OAAO,CAACW,wBAAR,CAAiCR,WAAjC,CAA5B;;AACA,WAAK,IAAIS,OAAT,IAAoBF,aAAa,CAACG,SAAlC,EAA6C;AACzCJ,QAAAA,eAAe,CAACG,OAAO,CAACE,IAAT,CAAf,GAAgC,EAAhC;AACA,cAAMC,mBAAmB,GAAG,MAAMf,OAAO,CAACgB,iBAAR,CAA0BJ,OAAO,CAACK,EAAlC,CAAlC;AACAR,QAAAA,eAAe,CAACG,OAAO,CAACE,IAAT,CAAf,CAA8BI,IAA9B,CAAmCH,mBAAnC;AACH;;AACDV,MAAAA,eAAe,CAACI,eAAD,CAAf;AACAF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AACD,QAAID,SAAS,IAAIH,WAAW,KAAK,IAAjC,EAAuC;AACnCK,MAAAA,eAAe;AAClB;AACJ,GAfQ,EAeN,CAACJ,YAAD,EAAeD,WAAf,EAA4BG,SAA5B,CAfM,CAAT;AAkBA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEK,CAACA,SAAD,gBAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAb,GAAqC,IAF1C,eAGI;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA,gBACKa,MAAM,CAACC,OAAP,CAAehB,YAAf,EAA6BiB,GAA7B,CAAiC,CAAC,CAACT,OAAD,EAAUR,YAAV,CAAD;AAAA;AAC9B;AACI;AAAA,gCAAcQ,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA,cAF0B,CAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAVH;AADL;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CA1CD;;GAAMV,qB;;KAAAA,qB;AA4CN,eAAeA,qBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility'; \n\nconst CompaniesApplications = ({currentUser}) => {\n    const [applications, setApplications] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        async function getApplications() { \n            let applicationsArr = {}\n            const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n            for (let company of userCompanies.companies) {\n                applicationsArr[company.name] = []\n                const companyApplications = await ChefApi.getJobsForCompany(company.id)\n                applicationsArr[company.name].push(companyApplications)\n            }\n            setApplications(applicationsArr);\n            setIsLoading(false); \n        }\n        if (isLoading && currentUser !== null) {\n            getApplications()\n        }\n    }, [applications, currentUser, isLoading])\n\n\n    return (\n        <div>\n            <h1>Current Applications</h1>\n            {!isLoading ? <div>Loading...</div> : null}\n            <ul className=\"applications-ul\">\n                {Object.entries(applications).map(([company, applications]) => (\n                    // <div key={application.job.id}>\n                        <li>Company: {company}</li>\n                        // <li>Address: {application.company.address}</li>\n                        // <li>URL: {application.company.url}</li>\n                        // <br></br>\n                        // <li>Position: {application.job.position}</li>\n                        // <li>Hourly Pay: {application.job.hourly_pay}</li>\n                        // <li>Date: {formatDate(application.job.date)}</li>\n                        // <li>Status: {application.status}</li><br></br>\n                    // </div>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default CompaniesApplications;"]},"metadata":{},"sourceType":"module"}