{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { Button } from '@material-ui/core';\nimport { formatDate } from '../utilities/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [companies, setCompanies] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function getApplications() {\n      let applicationsArr = [];\n      const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n\n      for (let company of userCompanies.companies) {\n        const companyApplications = await ChefApi.getJobsForCompany(company.id);\n        applicationsArr.push([company, companyApplications]);\n      }\n\n      setCompanies(applicationsArr);\n      console.log(companies);\n      setIsLoading(false);\n    }\n\n    if (isLoading && currentUser !== null) {\n      getApplications();\n    }\n  }, [companies, currentUser, isLoading]);\n\n  const acceptApplicant = ([username, jobId]) => async e => {\n    const status = await ChefApi.updateApplication(username, jobId, {\n      status: \"APPROVED\"\n    });\n    alert(`You have ${status} this job`);\n  };\n\n  const denyApplicant = ([username, jobId]) => async e => {\n    const status = await ChefApi.updateApplication(username, jobId, {\n      status: \"DENIED\"\n    });\n    alert(`You have ${status} this job`);\n  };\n\n  return !isLoading && companies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"applications-ul\",\n      children: companies.map(company => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Company: \", company[0].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Address: \", company[0].address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"URL: \", company[0].url]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), company[1].length > 0 ? company[1].map(application => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Position: \", application.position]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Hourly Pay: \", application.hourly_pay]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Date: \", formatDate(application.date)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 78\n          }, this), application.applications.length > 0 ? application.applications.map(applicant => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Username: \", applicant[1]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Status: \", applicant[2]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 72\n            }, this), \"applicant[2] === \\\"PENDING\\\" ?\", /*#__PURE__*/_jsxDEV(Button, {\n              onClick: acceptApplicant([applicant[1], application.id]),\n              variant: \"contained\",\n              color: \"primary\",\n              children: \"Accept\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: denyApplicant([applicant[1], application.id]),\n              variant: \"contained\",\n              color: \"secondary\",\n              children: \"Deny\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 41\n            }, this), \": null }\"]\n          }, applicant[0], true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No applicants\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 35\n          }, this)]\n        }, application.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No applications to display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 28\n        }, this)]\n      }, company[0].id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Currently no applications to display\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CompaniesApplications, \"niGTBxyBTMpwtAUx5oAqsnDc55U=\");\n\n_c = CompaniesApplications;\nexport default CompaniesApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js"],"names":["React","useState","useEffect","ChefApi","Button","formatDate","CompaniesApplications","currentUser","companies","setCompanies","isLoading","setIsLoading","getApplications","applicationsArr","userCompanies","getCompaniesFromUsername","company","companyApplications","getJobsForCompany","id","push","console","log","acceptApplicant","username","jobId","e","status","updateApplication","alert","denyApplicant","length","map","name","address","url","application","position","hourly_pay","date","applications","applicant"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { Button } from '@material-ui/core';\nimport { formatDate } from '../utilities/utility'; \n\nconst CompaniesApplications = ({currentUser}) => {\n    const [companies, setCompanies] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        async function getApplications() { \n            let applicationsArr = []\n            const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n            for (let company of userCompanies.companies) {\n                const companyApplications = await ChefApi.getJobsForCompany(company.id)\n                applicationsArr.push([company, companyApplications])\n            }\n            setCompanies(applicationsArr);\n            console.log(companies)\n            setIsLoading(false); \n        }\n        if (isLoading && currentUser !== null) {\n            getApplications()\n        }\n    }, [companies, currentUser, isLoading])\n\n\n    const acceptApplicant = ([username, jobId]) => async (e) => {\n        const status = await ChefApi.updateApplication(username, jobId, {status: \"APPROVED\"})\n        alert(`You have ${status} this job`)\n    }\n\n    const denyApplicant = ([username, jobId]) => async (e) => {\n        const status = await ChefApi.updateApplication(username, jobId, {status: \"DENIED\"})\n        alert(`You have ${status} this job`)    \n    }\n\n    return (\n        !isLoading && companies.length > 0 ?\n        <div>\n            <h1>Current Applications</h1>\n            <ul className=\"applications-ul\">\n                {companies.map(company => (\n                    <div key={company[0].id}>\n                        <li>Company: {company[0].name}</li>\n                        <li>Address: {company[0].address}</li>\n                        <li>URL: {company[0].url}</li>\n                        <br></br>\n                        {company[1].length > 0 ?\n                        company[1].map(application => (\n                            <ul key={application.id}>   \n                                <li>Position: {application.position}</li>\n                                <li>Hourly Pay: {application.hourly_pay}</li>\n                                <li>Date: {formatDate(application.date)}</li><br></br>\n                                {application.applications.length > 0 ?\n                                    application.applications.map(applicant => (\n                                    <ul key={applicant[0]}>\n                                        <li>Username: {applicant[1]}</li>\n                                        <li>Status: {applicant[2]}</li><br></br>\n                                        applicant[2] === \"PENDING\" ?\n                                        <Button onClick={acceptApplicant([applicant[1], application.id])} variant=\"contained\" color=\"primary\">Accept</Button>\n                                        <Button onClick={denyApplicant([applicant[1], application.id])} variant=\"contained\" color=\"secondary\">Deny</Button>\n                                        : null }\n                                    </ul> \n                                    ))\n                                : <p>No applicants</p> }\n                            </ul>\n                            ))\n                         : <p>No applications to display</p>}\n                    </div>\n                ))}\n            </ul>\n        </div>\n        : \n        <h1>Currently no applications to display</h1>\n    )\n}\n\nexport default CompaniesApplications;"]},"metadata":{},"sourceType":"module"}