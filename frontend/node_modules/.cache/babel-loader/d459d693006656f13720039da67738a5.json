{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/search/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst Map = ({\n  companies\n}) => {\n  _s();\n\n  const [coordinates, setCoordinates] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    async function loadCoordinates() {\n      let coordsArr = [];\n\n      for (let company of companies) {\n        const location = company.address;\n        await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n          params: {\n            address: location,\n            key: process.env.REACT_APP_API_KEY\n          }\n        }).then(function (response) {\n          let location = response.data.results[0].geometry.location;\n          let coordinates = [company.id.toString(), {\n            lat: location.lat,\n            lng: location.lng\n          }];\n          coordsArr.push(coordinates);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n\n      setCoordinates(coordsArr);\n      setIsLoaded(true);\n    }\n\n    loadCoordinates();\n  }, [companies]);\n  const location = {\n    lat: 32.74544,\n    lng: -117.14369\n  };\n  const mapStyles = {\n    height: \"70vh\",\n    width: \"100%\"\n  };\n  return isLoaded ? /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: process.env.REACT_APP_API_KEY,\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapStyles,\n      zoom: 13,\n      center: location,\n      children: [coordinates.map(coord => /*#__PURE__*/_jsxDEV(Marker, {\n        label: coord[0],\n        position: coord[1],\n        labelInBackground: true\n      }, coord[0], false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 13\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Map, \"qY1J3Oy3hLawXv6yWprpHWs1FyM=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/search/Map.js"],"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","axios","require","config","Map","companies","coordinates","setCoordinates","isLoaded","setIsLoaded","loadCoordinates","coordsArr","company","location","address","get","params","key","process","env","REACT_APP_API_KEY","then","response","data","results","geometry","id","toString","lat","lng","push","catch","error","console","log","mapStyles","height","width","map","coord"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,MAAhC,QAA8C,wBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAAA;;AAEzB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,eAAf,GAAiC;AAC7B,UAAIC,SAAS,GAAG,EAAhB;;AACA,WAAK,IAAIC,OAAT,IAAoBP,SAApB,EAA+B;AAC3B,cAAMQ,QAAQ,GAAGD,OAAO,CAACE,OAAzB;AACA,cAAMb,KAAK,CAACc,GAAN,CAAU,mDAAV,EAA+D;AACjEC,UAAAA,MAAM,EAAC;AACHF,YAAAA,OAAO,EAAED,QADN;AAEHI,YAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFd;AAD0D,SAA/D,EAMDC,IANC,CAMI,UAASC,QAAT,EAAkB;AACpB,cAAIT,QAAQ,GAAGS,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBC,QAAzB,CAAkCZ,QAAjD;AACA,cAAIP,WAAW,GAAG,CAACM,OAAO,CAACc,EAAR,CAAWC,QAAX,EAAD,EAAwB;AAACC,YAAAA,GAAG,EAAEf,QAAQ,CAACe,GAAf;AAAoBC,YAAAA,GAAG,EAAEhB,QAAQ,CAACgB;AAAlC,WAAxB,CAAlB;AACAlB,UAAAA,SAAS,CAACmB,IAAV,CAAexB,WAAf;AACH,SAVC,EAWDyB,KAXC,CAWK,UAASC,KAAT,EAAgB;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,SAbC,CAAN;AAcH;;AACDzB,MAAAA,cAAc,CAACI,SAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AACDC,IAAAA,eAAe;AAClB,GAxBQ,EAwBN,CAACL,SAAD,CAxBM,CAAT;AA0BA,QAAMQ,QAAQ,GAAG;AAACe,IAAAA,GAAG,EAAE,QAAN;AAAgBC,IAAAA,GAAG,EAAE,CAAC;AAAtB,GAAjB;AACA,QAAMM,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,KAAK,EAAE;AAFO,GAAlB;AAKA,SACI7B,QAAQ,gBACJ,QAAC,UAAD;AACI,IAAA,gBAAgB,EAAGU,OAAO,CAACC,GAAR,CAAYC,iBADnC;AAAA,2BAEA,QAAC,SAAD;AACI,MAAA,iBAAiB,EAAKe,SAD1B;AAEI,MAAA,IAAI,EAAK,EAFb;AAGI,MAAA,MAAM,EAAKtB,QAHf;AAAA,iBAKCP,WAAW,CAACgC,GAAZ,CAAgBC,KAAK,iBAClB,QAAC,MAAD;AACI,QAAA,KAAK,EAAEA,KAAK,CAAC,CAAD,CADhB;AAEI,QAAA,QAAQ,EAAEA,KAAK,CAAC,CAAD,CAFnB;AAGI,QAAA,iBAAiB,EAAE;AAHvB,SAAaA,KAAK,CAAC,CAAD,CAAlB;AAAA;AAAA;AAAA;AAAA,cADH,CALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,UADI,gBAmBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UApBR;AAsBH,CA3DD;;GAAMnC,G;;KAAAA,G;AA6DN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport axios from 'axios';\nrequire('dotenv').config()\n\nconst Map = ({companies}) => {\n\n    const [coordinates, setCoordinates] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        async function loadCoordinates() {\n            let coordsArr = [];\n            for (let company of companies) {\n                const location = company.address\n                await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n                    params:{\n                        address: location,\n                        key: process.env.REACT_APP_API_KEY\n                    }\n                })\n                    .then(function(response){\n                        let location = response.data.results[0].geometry.location\n                        let coordinates = [company.id.toString(), {lat: location.lat, lng: location.lng}]\n                        coordsArr.push(coordinates)      \n                    })\n                    .catch(function(error) {\n                        console.log(error)\n                    }) \n            }\n            setCoordinates(coordsArr);\n            setIsLoaded(true)\n        }\n        loadCoordinates();\n    }, [companies]);\n\n    const location = {lat: 32.74544, lng: -117.14369}\n    const mapStyles = {\n        height: \"70vh\",\n        width: \"100%\"\n    }\n\n    return (\n        isLoaded  ?\n            <LoadScript\n                googleMapsApiKey= {process.env.REACT_APP_API_KEY}>\n            <GoogleMap\n                mapContainerStyle = { mapStyles }\n                zoom = { 13 }\n                center = { location } \n            >\n            {coordinates.map(coord => (\n                <Marker key={coord[0]}\n                    label={coord[0]} \n                    position={coord[1]}\n                    labelInBackground={true}\n                />\n                ))\n            })\n            </GoogleMap >\n            </LoadScript>\n            :\n            <p>Loading...</p>\n    )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}