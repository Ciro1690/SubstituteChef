{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [companies, setCompanies] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function getApplications() {\n      let applicationsArr = [];\n      const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n\n      for (let company of userCompanies.companies) {\n        const companyApplications = await ChefApi.getJobsForCompany(company.id);\n        applicationsArr.push([company, companyApplications]);\n      }\n\n      setApplications(applicationsArr);\n      console.log(companies);\n      setIsLoading(false);\n    }\n\n    if (isLoading && currentUser !== null) {\n      getApplications();\n    }\n  }, [companies, currentUser, isLoading]);\n  return companies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), !isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 27\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"applications-ul\",\n      children: companies.map(company => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Company: \", company[0].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Address: \", company[0].address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"URL: \", company[0].url]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this), company[1].map(application => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Position: \", application.position]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Hourly Pay: \", application.hourly_pay]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Date: \", formatDate(application.date)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Status: \", application.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 70\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this))]\n      }, company[0].id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Apply to jobs to view applications\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CompaniesApplications, \"niGTBxyBTMpwtAUx5oAqsnDc55U=\");\n\n_c = CompaniesApplications;\nexport default CompaniesApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js"],"names":["React","useState","useEffect","ChefApi","formatDate","CompaniesApplications","currentUser","companies","setCompanies","isLoading","setIsLoading","getApplications","applicationsArr","userCompanies","getCompaniesFromUsername","company","companyApplications","getJobsForCompany","id","push","setApplications","console","log","length","map","name","address","url","application","position","hourly_pay","date","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility'; \n\nconst CompaniesApplications = ({currentUser}) => {\n    const [companies, setCompanies] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        async function getApplications() { \n            let applicationsArr = []\n            const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n            for (let company of userCompanies.companies) {\n                const companyApplications = await ChefApi.getJobsForCompany(company.id)\n                applicationsArr.push([company, companyApplications])\n            }\n            setApplications(applicationsArr);\n            console.log(companies)\n            setIsLoading(false); \n        }\n        if (isLoading && currentUser !== null) {\n            getApplications()\n        }\n    }, [companies, currentUser, isLoading])\n\n\n    return (\n        companies.length > 0 ?\n        <div>\n            <h1>Current Applications</h1>\n            {!isLoading ? <div>Loading...</div> : null}\n            <ul className=\"applications-ul\">\n                {companies.map(company => (\n                    <div key={company[0].id}>\n                        <li>Company: {company[0].name}</li>\n                        <li>Address: {company[0].address}</li>\n                        <li>URL: {company[0].url}</li>\n                        <br></br>\n                        {company[1].map(application => (\n                            <ul>   \n                                <li>Position: {application.position}</li>\n                                <li>Hourly Pay: {application.hourly_pay}</li>\n                                <li>Date: {formatDate(application.date)}</li>\n                                <li>Status: {application.status}</li><br></br>\n                            </ul>\n                        ))}\n                    </div>\n                ))}\n            </ul>\n        </div>\n        : \n        <h1>Apply to jobs to view applications</h1>\n    )\n}\n\nexport default CompaniesApplications;"]},"metadata":{},"sourceType":"module"}