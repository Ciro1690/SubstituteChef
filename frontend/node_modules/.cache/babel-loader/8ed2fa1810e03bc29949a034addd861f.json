{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [applications, setApplications] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    async function getApplications() {\n      let applicationsArr = {};\n      const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n\n      for (let company of userCompanies.companies) {\n        applicationsArr[company.name] = [];\n        const companyApplications = await ChefApi.getJobsForCompany(company.id);\n        applicationsArr[company.name].push(companyApplications);\n      }\n\n      setApplications(applicationsArr);\n      setIsLoaded(true);\n    }\n\n    if (isLoaded && currentUser !== null) {\n      getApplications();\n    }\n  }, [applications, currentUser, isLoaded]);\n  return applications.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), !isLoaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 26\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"applications-ul\",\n      children: applications.map(application => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Company: \", application.company.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Address: \", application.company.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"URL: \", application.company.url]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Position: \", application.job.position]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Hourly Pay: \", application.job.hourly_pay]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Date: \", formatDate(application.job.date)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Status: \", application.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 62\n        }, this)]\n      }, application.job.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Apply to jobs to view applications\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CompaniesApplications, \"8j82dR5p3jGCuw2/3E5R4UV5b70=\");\n\n_c = CompaniesApplications;\nexport default CompaniesApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js"],"names":["React","useState","useEffect","ChefApi","formatDate","CompaniesApplications","currentUser","applications","setApplications","isLoaded","setIsLoaded","getApplications","applicationsArr","userCompanies","getCompaniesFromUsername","company","companies","name","companyApplications","getJobsForCompany","id","push","length","map","application","address","url","job","position","hourly_pay","date","status"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;;AAEA,MAAMC,qBAAqB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAmB;AAAA;;AAC7C,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,eAAf,GAAiC;AAC7B,UAAIC,eAAe,GAAG,EAAtB;AACA,YAAMC,aAAa,GAAG,MAAMV,OAAO,CAACW,wBAAR,CAAiCR,WAAjC,CAA5B;;AACA,WAAK,IAAIS,OAAT,IAAoBF,aAAa,CAACG,SAAlC,EAA6C;AACzCJ,QAAAA,eAAe,CAACG,OAAO,CAACE,IAAT,CAAf,GAAgC,EAAhC;AACA,cAAMC,mBAAmB,GAAG,MAAMf,OAAO,CAACgB,iBAAR,CAA0BJ,OAAO,CAACK,EAAlC,CAAlC;AACAR,QAAAA,eAAe,CAACG,OAAO,CAACE,IAAT,CAAf,CAA8BI,IAA9B,CAAmCH,mBAAnC;AACH;;AACDV,MAAAA,eAAe,CAACI,eAAD,CAAf;AACAF,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AACD,QAAID,QAAQ,IAAIH,WAAW,KAAK,IAAhC,EAAsC;AAClCK,MAAAA,eAAe;AAClB;AACJ,GAfQ,EAeN,CAACJ,YAAD,EAAeD,WAAf,EAA4BG,QAA5B,CAfM,CAAT;AAkBA,SACIF,YAAY,CAACe,MAAb,GAAsB,CAAtB,gBACA;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEK,CAACb,QAAD,gBAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAZ,GAAoC,IAFzC,eAGI;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA,gBACKF,YAAY,CAACgB,GAAb,CAAiBC,WAAW,iBACzB;AAAA,gCACI;AAAA,kCAAcA,WAAW,CAACT,OAAZ,CAAoBE,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,kCAAcO,WAAW,CAACT,OAAZ,CAAoBU,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,8BAAUD,WAAW,CAACT,OAAZ,CAAoBW,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA,mCAAeF,WAAW,CAACG,GAAZ,CAAgBC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAA,qCAAiBJ,WAAW,CAACG,GAAZ,CAAgBE,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI;AAAA,+BAAWzB,UAAU,CAACoB,WAAW,CAACG,GAAZ,CAAgBG,IAAjB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI;AAAA,iCAAaN,WAAW,CAACO,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,eAQyC;AAAA;AAAA;AAAA;AAAA,gBARzC;AAAA,SAAUP,WAAW,CAACG,GAAZ,CAAgBP,EAA1B;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,gBAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UArBJ;AAuBH,CA7CD;;GAAMf,qB;;KAAAA,qB;AA+CN,eAAeA,qBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { formatDate } from '../utilities/utility'; \n\nconst CompaniesApplications = ({currentUser}) => {\n    const [applications, setApplications] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        async function getApplications() { \n            let applicationsArr = {}\n            const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n            for (let company of userCompanies.companies) {\n                applicationsArr[company.name] = []\n                const companyApplications = await ChefApi.getJobsForCompany(company.id)\n                applicationsArr[company.name].push(companyApplications)\n            }\n            setApplications(applicationsArr);\n            setIsLoaded(true); \n        }\n        if (isLoaded && currentUser !== null) {\n            getApplications()\n        }\n    }, [applications, currentUser, isLoaded])\n\n\n    return (\n        applications.length > 0 ?\n        <div>\n            <h1>Current Applications</h1>\n            {!isLoaded ? <div>Loading...</div> : null}\n            <ul className=\"applications-ul\">\n                {applications.map(application => (\n                    <div key={application.job.id}>\n                        <li>Company: {application.company.name}</li>\n                        <li>Address: {application.company.address}</li>\n                        <li>URL: {application.company.url}</li>\n                        <br></br>\n                        <li>Position: {application.job.position}</li>\n                        <li>Hourly Pay: {application.job.hourly_pay}</li>\n                        <li>Date: {formatDate(application.job.date)}</li>\n                        <li>Status: {application.status}</li><br></br>\n                    </div>\n                ))}\n            </ul>\n        </div>\n        : \n        <h1>Apply to jobs to view applications</h1>\n    )\n}\n\nexport default CompaniesApplications;"]},"metadata":{},"sourceType":"module"}