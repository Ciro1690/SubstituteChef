{"ast":null,"code":"var _jsxFileName = \"/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { Button } from '@material-ui/core';\nimport { formatDate } from '../utilities/utility';\nimport { CompanyCard } from '../home/CompanyCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesApplications = ({\n  currentUser\n}) => {\n  _s();\n\n  const [companies, setCompanies] = useState(null);\n  const [decided, setDecided] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  useEffect(() => {\n    async function getApplications() {\n      let applicationsArr = [];\n      const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n\n      for (let company of userCompanies.companies) {\n        const companyApplications = await ChefApi.getJobsForCompany(company.id);\n        applicationsArr.push([company, companyApplications]);\n      }\n\n      setCompanies(applicationsArr);\n      setIsLoading(false);\n      setDecided(false);\n    }\n\n    if (!decided && currentUser !== null) {\n      getApplications();\n    }\n  }, [companies, currentUser, decided]);\n\n  const acceptApplicant = ([username, jobId]) => async e => {\n    const status = await ChefApi.updateApplication(username, jobId, {\n      status: \"APPROVED\"\n    });\n    setDecided(true);\n    alert(`You have ${status} this job`);\n  };\n\n  const denyApplicant = ([username, jobId]) => async e => {\n    const status = await ChefApi.updateApplication(username, jobId, {\n      status: \"DENIED\"\n    });\n    setDecided(true);\n    alert(`You have ${status} this job`);\n  };\n\n  const deleteJob = async id => {\n    try {\n      const job = await ChefApi.deleteJob(id);\n      console.log(job);\n      alert(`Deleted job`);\n    } catch (err) {\n      console.log(err);\n      setErrors(`Unable to delete job`);\n    }\n  };\n\n  return !isLoading && companies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row applications-ul\",\n      children: companies.map(company => /*#__PURE__*/_jsxDEV(CompanyCard, {\n        company: company\n      }, company.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this) //     <div className=\"col border\" key={company[0].id}>\n  //         <h2>{company[0].name}</h2>\n  //         <p>{company[0].address}</p>\n  //         <p><a href={company[0].url} target=\"blank\">{company[0].url}</a></p>\n  //         <br></br>\n  //         <div className=\"row\">\n  //             {company[1].length > 0 ?\n  //             company[1].map(application => (\n  //                 <div className=\"col\" key={application.id}><b>Open Positions</b>   \n  //                     <p>Position: {application.position}</p>\n  //                     <p>Hourly Pay: {application.hourly_pay}</p>\n  //                     <p>Date: {formatDate(application.date)}</p>\n  //                     <Button \n  //                         onClick={() => deleteJob(application.id)}\n  //                         variant=\"contained\" \n  //                         color=\"primary\">\n  //                         Delete Job\n  //                     </Button>\n  //                     <br></br><br></br>\n  //                     {application.applications.length > 0 ?\n  //                         application.applications.map(applicant => (\n  //                         <div key={applicant[0]}>\n  //                             <p>Applicant: {applicant[1]}</p>\n  //                             <p>Status: {applicant[2]}</p>\n  //                             {applicant[2] === \"PENDING\" && !decided ?\n  //                             <div>\n  //                                 <Button onClick={acceptApplicant([applicant[1], application.id])} color=\"secondary\">Accept</Button>\n  //                                 <Button onClick={denyApplicant([applicant[1], application.id])} color=\"primary\">Deny</Button>\n  //                             </div>\n  //                             : null }\n  //                             <div>\n  //                                 {errors.length ?\n  //                                 <p>{errors}</p>\n  //                                 : null }\n  //                             </div>\n  //                             <br></br>\n  //                         </div> \n  //                         ))\n  //                     : <p>No applicants</p> }\n  //                 </div>\n  //                     ))\n  //                 : <p>No applications to display</p>}\n  //              </div>\n  //         </div>\n  //      ))}\n  //     </div>\n  // </div>\n  // : \n  // <h1>Currently no applications to display</h1>\n  ;\n};\n\n_s(CompaniesApplications, \"0GJaDltA5L3elbV9T+3a12Hz8r0=\");\n\n_c = CompaniesApplications;\nexport default CompaniesApplications;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesApplications\");","map":{"version":3,"sources":["/Users/cheers/Desktop/Coding/Springboard/substitute-chef/frontend/src/components/companies/CompaniesApplications.js"],"names":["React","useState","useEffect","ChefApi","Button","formatDate","CompanyCard","CompaniesApplications","currentUser","companies","setCompanies","decided","setDecided","isLoading","setIsLoading","errors","setErrors","getApplications","applicationsArr","userCompanies","getCompaniesFromUsername","company","companyApplications","getJobsForCompany","id","push","acceptApplicant","username","jobId","e","status","updateApplication","alert","denyApplicant","deleteJob","job","console","log","err","length","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChefApi from '../api/api';\nimport { Button } from '@material-ui/core';\nimport { formatDate } from '../utilities/utility'; \nimport { CompanyCard } from '../home/CompanyCard';\n\nconst CompaniesApplications = ({currentUser}) => {\n    const [companies, setCompanies] = useState(null);\n    const [decided, setDecided] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [errors, setErrors] = useState([]);\n\n    useEffect(() => {\n        async function getApplications() { \n            let applicationsArr = []\n            const userCompanies = await ChefApi.getCompaniesFromUsername(currentUser);\n            for (let company of userCompanies.companies) {\n                const companyApplications = await ChefApi.getJobsForCompany(company.id)\n                applicationsArr.push([company, companyApplications])\n            }\n            setCompanies(applicationsArr);\n            setIsLoading(false);\n            setDecided(false);\n        }\n        if (!decided && currentUser !== null) {\n            getApplications()\n        }\n    }, [companies, currentUser, decided])\n\n\n    const acceptApplicant = ([username, jobId]) => async (e) => {\n        const status = await ChefApi.updateApplication(username, jobId, {status: \"APPROVED\"})\n        setDecided(true)\n        alert(`You have ${status} this job`)\n    }\n\n    const denyApplicant = ([username, jobId]) => async (e) => {\n        const status = await ChefApi.updateApplication(username, jobId, {status: \"DENIED\"})\n        setDecided(true)\n        alert(`You have ${status} this job`)    \n    }\n\n     const deleteJob = async (id) => {\n        try {\n            const job = await ChefApi.deleteJob(id)\n            console.log(job)\n            alert(`Deleted job`)\n        }\n        catch (err) {\n            console.log(err)\n            setErrors(`Unable to delete job`)\n        }\n    }\n\n    return (\n        !isLoading && companies.length > 0 ?\n        <div className=\"container\">\n            <h1>Current Applications</h1>\n            <div className=\"row applications-ul\">\n                {companies.map(company => (\n                    <CompanyCard key={company.id} company={company}/>\n                ))}\n            </div>\n        </div>\n        :\n        <p>Loading...</p>\n                //     <div className=\"col border\" key={company[0].id}>\n                //         <h2>{company[0].name}</h2>\n                //         <p>{company[0].address}</p>\n                //         <p><a href={company[0].url} target=\"blank\">{company[0].url}</a></p>\n                //         <br></br>\n                //         <div className=\"row\">\n                //             {company[1].length > 0 ?\n                //             company[1].map(application => (\n                //                 <div className=\"col\" key={application.id}><b>Open Positions</b>   \n                //                     <p>Position: {application.position}</p>\n                //                     <p>Hourly Pay: {application.hourly_pay}</p>\n                //                     <p>Date: {formatDate(application.date)}</p>\n                //                     <Button \n                //                         onClick={() => deleteJob(application.id)}\n                //                         variant=\"contained\" \n                //                         color=\"primary\">\n                //                         Delete Job\n                //                     </Button>\n                //                     <br></br><br></br>\n                //                     {application.applications.length > 0 ?\n                //                         application.applications.map(applicant => (\n                //                         <div key={applicant[0]}>\n                //                             <p>Applicant: {applicant[1]}</p>\n                //                             <p>Status: {applicant[2]}</p>\n                //                             {applicant[2] === \"PENDING\" && !decided ?\n                //                             <div>\n                //                                 <Button onClick={acceptApplicant([applicant[1], application.id])} color=\"secondary\">Accept</Button>\n                //                                 <Button onClick={denyApplicant([applicant[1], application.id])} color=\"primary\">Deny</Button>\n                //                             </div>\n                //                             : null }\n                //                             <div>\n                //                                 {errors.length ?\n                //                                 <p>{errors}</p>\n                //                                 : null }\n                //                             </div>\n                //                             <br></br>\n                //                         </div> \n                //                         ))\n                //                     : <p>No applicants</p> }\n                //                 </div>\n            //                     ))\n            //                 : <p>No applications to display</p>}\n            //              </div>\n            //         </div>\n            //      ))}\n        //     </div>\n        // </div>\n        // : \n        // <h1>Currently no applications to display</h1>\n    )\n}\n\nexport default CompaniesApplications;"]},"metadata":{},"sourceType":"module"}